#!/bin/bash
set -e

# Color definitions
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Helper functions for logging
print_status() {
  echo -e "${GREEN}[INFO]${NC} $1"
}

print_error() {
  echo -e "${RED}[ERROR]${NC} $1"
}

print_warning() {
  echo -e "${YELLOW}[WARNING]${NC} $1"
}

# --- Script Start ---

print_status "Starting new client generation script..."

# Validate arguments
if [ "$#" -ne 3 ]; then
  print_error "Usage: $0 \"Business Name\" \"city-state\" \"business-type\""
  print_error "Example: $0 \"Awesome Landscaping\" \"anytown-ca\" \"landscaping\""
  exit 1
fi

BUSINESS_NAME="$1"
CITY_STATE="$2"
BUSINESS_TYPE="$3"

print_status "Business Name: ${BUSINESS_NAME}"
print_status "City/State: ${CITY_STATE}"
print_status "Business Type: ${BUSINESS_TYPE}"

# Validate business type
ALLOWED_TYPES=("landscaping" "hvac" "roofing" "plumbing" "general")
if [[ ! " ${ALLOWED_TYPES[@]} " =~ " ${BUSINESS_TYPE} " ]]; then
  print_error "Invalid business type: '${BUSINESS_TYPE}'."
  print_error "Allowed types are: ${ALLOWED_TYPES[*]}"
  exit 1
fi

# Generate client slug
CLIENT_NAME_SLUG=$(echo "$BUSINESS_NAME" | tr '[:upper:]' '[:lower:]' | sed -e 's/[^a-z0-9 -]//g' -e 's/ +/-/g' -e 's/^-//' -e 's/-$//')
CLIENT_SLUG="client-${CLIENT_NAME_SLUG}-${CITY_STATE}"
CLIENT_DIR="clients/${CLIENT_SLUG}"

print_status "Generated client slug: ${CLIENT_SLUG}"
print_status "Client directory will be: ${CLIENT_DIR}"

# Check if client directory already exists
if [ -d "$CLIENT_DIR" ]; then
  print_error "Client directory '${CLIENT_DIR}' already exists. Aborting."
  exit 1
fi

print_status "Client directory does not exist. Proceeding..."

# --- File Generation Steps ---
print_status "Creating client directory: ${CLIENT_DIR}"
mkdir -p "${CLIENT_DIR}"

print_status "Copying template files from apps/website/ to ${CLIENT_DIR}/"
# We need to be careful about what we copy. Avoid .next, node_modules, etc.
# Using rsync for more control over exclusions.
if rsync -a --exclude '.next/' --exclude 'node_modules/' --exclude '.git/' --exclude 'playwright-report/' --exclude 'test-results/' "apps/website/" "${CLIENT_DIR}/"; then
  print_status "Template files copied successfully."
else
  print_error "Failed to copy template files. Aborting."
  # Clean up partially created directory
  rm -rf "${CLIENT_DIR}"
  exit 1
fi

print_status "Updating package.json in ${CLIENT_DIR}/package.json"
# Use a temporary file for sed on macOS compatibility, though not strictly needed for Linux sed -i
PACKAGE_JSON_PATH="${CLIENT_DIR}/package.json"
if [[ "$(uname)" == "Darwin" ]]; then
  sed -i '.bak' "s/\"name\": \"website\"/\"name\": \"${CLIENT_SLUG}\"/g" "${PACKAGE_JSON_PATH}"
  rm -f "${PACKAGE_JSON_PATH}.bak"
else
  sed -i "s/\"name\": \"website\"/\"name\": \"${CLIENT_SLUG}\"/g" "${PACKAGE_JSON_PATH}"
fi
print_status "package.json updated successfully."

print_status "Generating .env.local file in ${CLIENT_DIR}/.env.local"
ENV_LOCAL_PATH="${CLIENT_DIR}/.env.local"
cat << EOF > "${ENV_LOCAL_PATH}"
# Marketing Site Factory - Client Environment Variables
# Replace placeholder values with actual client data

# Business Information (used for SEO, schema, display)
NEXT_PUBLIC_BUSINESS_NAME="${BUSINESS_NAME}"
NEXT_PUBLIC_BUSINESS_TYPE="${BUSINESS_TYPE}"
NEXT_PUBLIC_CITY_STATE="${CITY_STATE}"
NEXT_PUBLIC_CLIENT_SLUG="${CLIENT_SLUG}"

# Contact Information
NEXT_PUBLIC_CONTACT_EMAIL="contact@example.com"
NEXT_PUBLIC_CONTACT_PHONE="(555) 123-4567"
NEXT_PUBLIC_CONTACT_ADDRESS="123 Main St, Anytown, USA"

# API Keys (replace with actual keys)
DATABASE_URL="postgresql://user:password@localhost:5432/mydatabase?schema=public"
# Add other API keys as needed (e.g., Google Maps, Analytics)
# SOME_OTHER_API_KEY="your_api_key_here"

# Site Configuration
NEXT_PUBLIC_SITE_URL="https://www.example.com" # Important for canonical URLs and sitemap

EOF
print_status ".env.local generated successfully with placeholder values."

print_status "Generating src/config/client.ts in ${CLIENT_DIR}/src/config/client.ts"
CLIENT_CONFIG_PATH="${CLIENT_DIR}/src/config/client.ts"
# Ensure the src/config directory exists
mkdir -p "${CLIENT_DIR}/src/config"

cat << EOF > "${CLIENT_CONFIG_PATH}"
# Client specific configurations
# This file is auto-generated by new-client.sh
# Review and update with actual client data.

export interface ClientSettings {
  businessName: string;
  businessType: string; // '${BUSINESS_TYPE}'
  cityState: string; // '${CITY_STATE}'
  clientSlug: string; // '${CLIENT_SLUG}'
  contactEmail?: string;
  contactPhone?: string;
  contactAddress?: string;
  siteUrl?: string;
  // Add other client-specific settings here
  logoUrl?: string;
  primaryColor?: string; // e.g., '#FF5733'
  secondaryColor?: string; // e.g., '#33FF57'
  services?: Service[];
  socialMedia?: {
    facebook?: string;
    twitter?: string;
    linkedin?: string;
    instagram?: string;
    youtube?: string;
  };
  // SEO related settings
  metaTitle?: string;
  metaDescription?: string;
  keywords?: string[];
}

export interface Service {
  name: string;
  description: string;
  imageUrl?: string;
  slug: string;
}

export const clientSettings: ClientSettings = {
  businessName: process.env.NEXT_PUBLIC_BUSINESS_NAME || "${BUSINESS_NAME}",
  businessType: process.env.NEXT_PUBLIC_BUSINESS_TYPE || "${BUSINESS_TYPE}",
  cityState: process.env.NEXT_PUBLIC_CITY_STATE || "${CITY_STATE}",
  clientSlug: process.env.NEXT_PUBLIC_CLIENT_SLUG || "${CLIENT_SLUG}",
  contactEmail: process.env.NEXT_PUBLIC_CONTACT_EMAIL || "contact@example.com",
  contactPhone: process.env.NEXT_PUBLIC_CONTACT_PHONE || "(555) 123-4567",
  contactAddress: process.env.NEXT_PUBLIC_CONTACT_ADDRESS || "123 Main St, Anytown, USA",
  siteUrl: process.env.NEXT_PUBLIC_SITE_URL || "https://www.example.com",
  // Initialize other settings with defaults or placeholders
  logoUrl: "/logo-placeholder.png", // Replace with actual logo path
  primaryColor: "#007bff", // Example primary color (Tailwind's blue-500)
  secondaryColor: "#6c757d", // Example secondary color (Tailwind's gray-500)
  services: [
    {
      name: "Sample Service 1",
      description: "Description for sample service 1.",
      slug: "sample-service-1",
      imageUrl: "/service1-placeholder.jpg",
    },
    {
      name: "Sample Service 2",
      description: "Description for sample service 2.",
      slug: "sample-service-2",
      imageUrl: "/service2-placeholder.jpg",
    },
  ],
  socialMedia: {
    facebook: "https://facebook.com/yourpage",
    twitter: "https://twitter.com/yourprofile",
  },
  metaTitle: `\${process.env.NEXT_PUBLIC_BUSINESS_NAME || "${BUSINESS_NAME}\"} - \${process.env.NEXT_PUBLIC_CITY_STATE || "${CITY_STATE}\"}`,
  metaDescription: `Leading provider of ${BUSINESS_TYPE} services in ${CITY_STATE}. Contact us today!`,
  keywords: ["${BUSINESS_TYPE}", "${CITY_STATE}", "${BUSINESS_NAME}"],
};

export default clientSettings;

EOF

print_status "src/config/client.ts generated successfully."

print_status "Generating placeholder HomePage component in ${CLIENT_DIR}/src/app/page.tsx"
HOMEPAGE_PATH="${CLIENT_DIR}/src/app/page.tsx"

# Ensure the src/app directory exists (it should from the rsync, but good practice)
mkdir -p "${CLIENT_DIR}/src/app"

cat << EOF > "${HOMEPAGE_PATH}"
// Auto-generated by new-client.sh
// This is a placeholder homepage. You should replace it with a business-type specific component.
import clientSettings from '@/config/client';
import { NextPage } from 'next';

const HomePage: NextPage = () => {
  return (
    <main className="flex min-h-screen flex-col items-center justify-center p-24">
      <div className="text-center">
        <h1 className="text-4xl font-bold tracking-tight text-gray-900 sm:text-6xl">
          Welcome to {clientSettings.businessName}
        </h1>
        <p className="mt-6 text-lg leading-8 text-gray-600">
          We are a leading provider of {clientSettings.businessType} services in {clientSettings.cityState}.
        </p>
        <p className="mt-4 text-md text-gray-500">
          Client Slug: {clientSettings.clientSlug}
        </p>
        <div className="mt-10 flex items-center justify-center gap-x-6">
          <a
            href="#"
            className="rounded-md bg-indigo-600 px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
          >
            Get started
          </a>
          <a href="#" className="text-sm font-semibold leading-6 text-gray-900">
            Learn more <span aria-hidden="true">â†’</span>
          </a>
        </div>
        <div className="mt-8">
          <h2 className="text-2xl font-semibold">Contact Us:</h2>
          <p>Email: {clientSettings.contactEmail}</p>
          <p>Phone: {clientSettings.contactPhone}</p>
          <p>Address: {clientSettings.contactAddress}</p>
        </div>
      </div>
    </main>
  );
};

export default HomePage;
EOF

print_status "Placeholder HomePage component generated successfully."

# --- Post-Generation Tasks ---
print_status "Initializing Git repository in ${CLIENT_DIR}/"
cd "${CLIENT_DIR}"
if git init; then
  print_status "Git repository initialized."
  if git add . && git commit -m "Initial commit: New client setup for ${CLIENT_SLUG}"; then
    print_status "Initial commit created successfully."
  else
    print_warning "Failed to create initial commit. Please check the directory."
  fi
else
  print_warning "Failed to initialize Git repository."
fi
cd "../.." # Go back to the project root (assuming scripts/ is one level down from root)

print_status "Installing dependencies in ${CLIENT_DIR}/ using pnpm..."
if (cd "${CLIENT_DIR}" && pnpm install --force); then # Running install within the client directory
  print_status "Dependencies installed successfully in ${CLIENT_DIR}/"
else
  print_error "Failed to install dependencies in ${CLIENT_DIR}/. Please check the output and run 'pnpm install' manually in that directory."
  # We might not want to exit here, let the user decide if they want to proceed or fix.
fi

print_status "-------------------------------------------------------------"
print_status "Client project '${CLIENT_SLUG}' created successfully!"
print_status "-------------------------------------------------------------"
print_status "Next Steps:"
print_status "1. Navigate to the client directory: cd ${CLIENT_DIR}"
print_status "2. Review and update placeholder values in '.env.local'"
print_status "3. Review and update configuration in 'src/config/client.ts'"
print_status "4. Customize the homepage component: 'src/app/page.tsx'"
print_status "5. Replace placeholder images and assets."
print_status "6. Develop business-specific components (Hero, Services, Gallery, Contact)."
print_status "7. Run the development server: pnpm dev"
print_status "8. Add the new client project path ('${CLIENT_DIR}') to your IDE/editor workspace."
print_warning "Ensure you have a database entry for this client if your application requires it."

print_status "New client generation script finished." 